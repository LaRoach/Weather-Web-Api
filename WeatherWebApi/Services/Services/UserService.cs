using System;
using System.IdentityModel.Tokens.Jwt;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Amazon;
using Amazon.S3;
using Amazon.S3.Transfer;
using AutoMapper;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Net.Http.Headers;
using WeatherWebApi.Data.Interfaces;
using WeatherWebApi.Models.Users;
using WeatherWebApi.Services.Interfaces;
using WeatherWebApi.Utils;
using WeatherWebApi.Utils.Authorization;

namespace WeatherWebApi.Services.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _userRepository;

        private readonly IMapper _mapper;

        private IWebHostEnvironment _webhostEnvironment;

        private readonly IJwtHandler _jwtHandler;

        private readonly IHttpContextAccessor _httpContext;

        private readonly IConfiguration _config;

        public UserService(IUserRepository userRepository, IMapper mapper, IWebHostEnvironment webhostEnvironment, IJwtHandler jwtHandler, IHttpContextAccessor httpContext, IConfiguration config)
        {
            _userRepository = userRepository;
            _mapper = mapper;
            _webhostEnvironment = webhostEnvironment;
            _jwtHandler = jwtHandler;
            _httpContext = httpContext;
            _config = config;
        }

        public async Task RegisterUser(UserRegisterRequest user)
        {
            var checkIfUserExists = await _userRepository.CheckIfUserExists(user.Email);

            if (checkIfUserExists)
            {
                throw new CustomException("User with email already exists.", (int)StatusCodes.Status409Conflict);
            }

            var userRegister = _mapper.Map<User>(user);

            var passwordHash = BCrypt.Net.BCrypt.HashPassword(user.Password);

            userRegister.PasswordHash = passwordHash;

            userRegister.ImageLocation = await UploadImage(user);

            await _userRepository.RegisterUser(userRegister);
        }

        private async Task<string> UploadImage(UserRegisterRequest user)
        {
            string uniqueFileName = string.Empty;
            // access key id and secret key id, can be generated by navigating to IAM roles in AWS and then add new user, select permissions
            //for this example, try giving S3 full permissions
            using (var client = new AmazonS3Client(_config.GetSection("AWSKeyId").Value, _config.GetSection("AWSSecretAccessKey").Value, RegionEndpoint.APSouth1))
            {
                using (var newMemoryStream = new MemoryStream())
                {
                    user.Image.CopyTo(newMemoryStream);
                    string extension = Path.GetExtension(user.Image.FileName);
                    var uploadRequest = new TransferUtilityUploadRequest
                    {
                        InputStream = newMemoryStream,
                        Key = Guid.NewGuid().ToString() + "_" + user.Email + extension, // filename
                        BucketName = _config.GetSection("AWSBucketName").Value // bucket name of S3
                    };

                    var fileTransferUtility = new TransferUtility(client);
                    await fileTransferUtility.UploadAsync(uploadRequest);
                    uniqueFileName = $"https://{_config.GetSection("AWSBucketName").Value}.s3.ap-south-1.amazonaws.com/" + uploadRequest.Key;
                }
            }

            return uniqueFileName;
        }

        public async Task<UserLoginResponse> LoginUser(UserLoginRequest user)
        {
            if (user == null)
            {
                throw new ArgumentException(nameof(user));
            }
            var loginUser = await _userRepository.GetUser(user.Email);

            if (loginUser == null || !BCrypt.Net.BCrypt.Verify(user.Password, loginUser.PasswordHash))
            {
                throw new CustomException("The email or password is incorrect", (int)StatusCodes.Status401Unauthorized);
            }

            var userLoginResponse = _mapper.Map<UserLoginResponse>(loginUser);
            userLoginResponse.Token = _jwtHandler.GenerateToken(loginUser);

            return userLoginResponse;
        }

        public async Task<UserProfileResponse> LoadProfilePage()
        {
            var token = _httpContext.HttpContext.Request.Headers[HeaderNames.Authorization].ToString();

            if (string.IsNullOrEmpty(token))
            {
                throw new ArgumentNullException(nameof(token));
            }

            var email = FetchUserEmailFromToken(token.Split(" ")[1]);

            var user = await _userRepository.GetUser(email);

            if (user is null)
            {
                throw new CustomException("user profile for user doesnt exist", (int)StatusCodes.Status404NotFound);
            }

            return _mapper.Map<UserProfileResponse>(user);
        }

        private string FetchUserEmailFromToken(string token)
        {
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(token);
            var tokenData = jsonToken as JwtSecurityToken;
            return tokenData.Claims.First(claim => claim.Type == "email").Value;
        }
    }
}
